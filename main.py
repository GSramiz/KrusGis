import ee
import json

def initialize_services():
    try:
        with open("service-account.json") as f:
            service_account_info = json.load(f)

        credentials = ee.ServiceAccountCredentials(service_account_info["client_email"], "service-account.json")
        ee.Initialize(credentials)
        print("‚úÖ EE –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EE:", e)
        raise
# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞—Å—Å–µ—Ç–∞
def get_geometry_from_asset(region_name):
    try:
        fc = ee.FeatureCollection("projects/ee-romantik1994/assets/region")
        region = fc.filter(ee.Filter.eq("title", region_name)).first()
        if region is None:
            raise ValueError(f"–†–µ–≥–∏–æ–Ω '{region_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Å—Å–µ—Ç–µ")
        return region.geometry()
    except Exception as e:
        log_error("get_geometry_from_asset", e)
        raise

# –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –æ–±–ª–∞–∫–æ–≤ –ø–æ SCL
def mask_clouds(img):
    scl = img.select("SCL")
    mask = scl.neq(3).And(scl.neq(8)).And(scl.neq(9)).And(scl.neq(10))
    return img.updateMask(mask)

# –û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–¥ —Ä–µ–≥–∏–æ–Ω–æ–º
def get_footprint_coverage(img, region):
    img_geom = img.geometry()
    intersection = img_geom.intersection(region, 1)
    inter_area = intersection.area(1)
    region_area = region.area(1)
    coverage = inter_area.divide(region_area)
    return coverage

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–∑–∞–∏–∫–∏ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
def build_mosaic_by_coverage(collection, region, min_coverage=0.95):
    sorted_imgs = collection.sort("CLOUDY_PIXEL_PERCENTAGE")

    def accumulate(img, acc):
        acc = ee.List(acc)
        coverage_so_far = ee.Number(acc.get(0))
        imgs_so_far = ee.List(acc.get(1))

        cov = get_footprint_coverage(img, region)
        new_coverage = coverage_so_far.add(cov)

        should_add = new_coverage.lt(min_coverage)

        updated_imgs = ee.Algorithms.If(
            should_add,
            imgs_so_far.add(img),
            imgs_so_far
        )

        updated_cov = ee.Algorithms.If(
            should_add,
            new_coverage,
            coverage_so_far
        )

        return ee.List([updated_cov, updated_imgs])

    init = ee.List([ee.Number(0), ee.List([])])

    result = ee.List(sorted_imgs.iterate(accumulate, init))

    coverage_final = ee.Number(result.get(0))
    images_final = ee.List(result.get(1))

    print("‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:", coverage_final.getInfo())
    print("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤:", images_final.size().getInfo())

    final_collection = ee.ImageCollection.fromImages(images_final)

    mosaic = final_collection.mosaic().resample("bicubic").clip(region)

    return mosaic

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        initialize_services()

        region_name = "–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π"
        start_date = "2022-05-01"
        end_date = "2022-06-01"

        print(f"\nüó∫Ô∏è –†–µ–≥–∏–æ–Ω: {region_name}, –ø–µ—Ä–∏–æ–¥: {start_date} ‚Üí {end_date}")
        geometry = get_geometry_from_asset(region_name)

        collection = (
            ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
            .filterDate(start_date, end_date)
            .filterBounds(geometry)
            .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", 40))
            .map(mask_clouds)
            .map(lambda img: img.resample("bicubic").select(["TCI_R", "TCI_G", "TCI_B"]))
        )

        count = collection.size().getInfo()
        if count == 0:
            print("‚ùå –ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        print(f"üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–Ω–∏–º–∫–æ–≤: {count}")

        mosaic = build_mosaic_by_coverage(collection, geometry, min_coverage=0.95)

        vis_params = {"bands": ["TCI_R", "TCI_G", "TCI_B"], "min": 0, "max": 255}

        tile_info = ee.data.getMapId({
            "image": mosaic,
            "visParams": vis_params
        })

        mapid = tile_info["mapid"].split("/")[-1]
        xyz_url = f"https://earthengine.googleapis.com/v1/projects/earthengine-legacy/maps/{mapid}/tiles/{{z}}/{{x}}/{{y}}"

        print("\n‚úÖ –ú–æ–∑–∞–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞. XYZ-—Å—Å—ã–ª–∫–∞:")
        print(xyz_url)

    except Exception as e:
        log_error("main", e)

if __name__ == "__main__":
    main()
