import ee
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from pprint import pprint

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CONFIG = {
    "spreadsheet_id": "1oz12JnCKuM05PpHNR1gkNR_tPENazabwOGkWWeAc2hY",
    "sheet_name": "1945273513",  # ID –≤–∫–ª–∞–¥–∫–∏
    "geometry": ee.Geometry.Rectangle([30, 50, 180, 80]),  # –ì—Ä–∞–Ω–∏—Ü—ã –†–§
    "bands": ["B4", "B3", "B2"],  # RGB-–∫–∞–Ω–∞–ª—ã
    "min": 0,
    "max": 3000,
    "max_clouds": 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å (30%)
}

# 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def auth():
    try:
        ee.Initialize()
        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "service-account.json", scope
        )
        client = gspread.authorize(creds)
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return client
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", str(e))
        return None

# 3. –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–Ω–∏–º–∫–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å)
def find_best_image(start_date, end_date):
    try:
        collection = ee.ImageCollection("COPERNICUS/S2_SR") \
            .filterDate(start_date, end_date) \
            .filterBounds(CONFIG["geometry"]) \
            .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", CONFIG["max_clouds"])) \
            .sort("CLOUDY_PIXEL_PERCENTAGE")  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
        
        # –ë–µ—Ä—ë–º —Å–Ω–∏–º–æ–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±–ª–∞—á–Ω–æ—Å—Ç—å—é
        best_image = ee.Image(collection.first())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–Ω–∏–º–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cloud_percent = best_image.get("CLOUDY_PIXEL_PERCENTAGE").getInfo()
        if cloud_percent is None:
            return None, None
        
        return best_image, cloud_percent
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–Ω–∏–º–∫–∞ ({start_date} - {end_date}):", str(e))
        return None, None

# 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL
def generate_url(image):
    try:
        return image.getThumbURL({
            "bands": CONFIG["bands"],
            "min": CONFIG["min"],
            "max": CONFIG["max"],
            "region": CONFIG["geometry"]
        })
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL:", str(e))
        return None

# 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
def update_sheet(client):
    try:
        sheet = client.open_by_key(CONFIG["spreadsheet_id"]).worksheet_by_id(int(CONFIG["sheet_name"]))
        data = sheet.get_all_values()
        
        for row_idx, row in enumerate(data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            region, month_year, current_url = row[0], row[1], row[2]
            
            if region != "–í—Å—è –†–§" or not month_year:
                continue
                
            try:
                month, year = month_year.split()
                start_date = f"{year}-{month}-01"
                end_date = ee.Date(start_date).advance(1, "month").format("YYYY-MM-dd").getInfo()
                
                print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞: {month_year}...")
                
                best_image, cloud_percent = find_best_image(start_date, end_date)
                
                if best_image:
                    url = generate_url(best_image)
                    if url:
                        sheet.update_cell(row_idx, 3, url)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É C
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {month_year} (–æ–±–ª–∞—á–Ω–æ—Å—Ç—å {cloud_percent}%)")
                    else:
                        sheet.update_cell(row_idx, 3, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL")
                else:
                    sheet.update_cell(row_idx, 3, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤")
                    print(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –¥–ª—è {month_year}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}:", str(e))
                sheet.update_cell(row_idx, 3, f"–û—à–∏–±–∫–∞: {str(e)}")
                
    except Exception as e:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", str(e))

if __name__ == "__main__":
    client = auth()
    if client:
        update_sheet(client)
