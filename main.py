import ee
import gspread
import json
import os
import traceback
import calendar
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
def log_error(context, error):
    print(f"\n‚ùå –û–®–ò–ë–ö–ê –≤ {context}:")
    print(f"–¢–∏–ø: {type(error).__name__}")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}")
    traceback.print_exc()
    print("=" * 50)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine –∏ Google Sheets
def initialize_services():
    try:
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        service_account_info = json.loads(os.environ["GEE_CREDENTIALS"])

        credentials = ee.ServiceAccountCredentials(
            service_account_info["client_email"],
            key_data=json.dumps(service_account_info)
        )
        ee.Initialize(credentials)
        print("‚úÖ Earth Engine: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        sheets_client = gspread.authorize(
            ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        )
        print("‚úÖ Google Sheets: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return sheets_client

    except Exception as e:
        log_error("initialize_services", e)
        raise

# –ü–µ—Ä–µ–≤–æ–¥ –º–µ—Å—è—Ü–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–æ–º–µ—Ä
def month_str_to_number(name):
    months = {
        "–Ø–Ω–≤–∞—Ä—å": "01", "–§–µ–≤—Ä–∞–ª—å": "02", "–ú–∞—Ä—Ç": "03", "–ê–ø—Ä–µ–ª—å": "04",
        "–ú–∞–π": "05", "–ò—é–Ω—å": "06", "–ò—é–ª—å": "07", "–ê–≤–≥—É—Å—Ç": "08",
        "–°–µ–Ω—Ç—è–±—Ä—å": "09", "–û–∫—Ç—è–±—Ä—å": "10", "–ù–æ—è–±—Ä—å": "11", "–î–µ–∫–∞–±—Ä—å": "12"
    }
    return months.get(name.strip().capitalize(), None)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞
def get_geometry(region_name, fc):
    feature = fc.filter(ee.Filter.eq("title", region_name)).first()
    return feature.geometry() if feature else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
def get_month_date_range(month_year_str):
    dt = datetime.strptime(month_year_str, "%B %Y")
    start = dt.replace(day=1)
    end = dt.replace(day=calendar.monthrange(dt.year, dt.month)[1])
    return start.strftime("%Y-%m-%d"), end.strftime("%Y-%m-%d"), dt

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞—á–Ω–æ-—Å–≤–æ–±–æ–¥–Ω–æ–π –º–æ–∑–∞–∏–∫–∏
def generate_cloud_free_mosaic(geometry, start_date, end_date):
    collection = (
        ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
        .filterDate(start_date, end_date)
        .filterBounds(geometry)
        .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", 40))
        .limit(10)
    )

    def mask_clouds(img):
        scl = img.select("SCL")
        mask = scl.neq(3).And(scl.neq(8)).And(scl.neq(9)).And(scl.neq(10)).And(scl.neq(11))
        return img.updateMask(mask)

    kernel = ee.Kernel.gaussian(radius=2, sigma=1)
    mosaic = (
        collection.map(mask_clouds)
        .mosaic()
        .resample("bicubic")
        .select(["TCI_R", "TCI_G", "TCI_B"])
        .convolve(kernel)
    )
    return mosaic

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XYZ-—Å—Å—ã–ª–∫–∏
def generate_xyz_url(image, vis_params):
    map_id = ee.Image(image).getMapId(vis_params)
    return f"https://earthengine.googleapis.com/v1/projects/ee-romantik1994/maps/{map_id['mapid']}/tiles/{{z}}/{{x}}/{{y}}"

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    try:
        sheets_client = initialize_services()
        sheet = sheets_client.open_by_key("1oz12JnCKuM05PpHNR1gkNR_tPENazabwOGkWWeAc2hY").worksheet("Sentinel-2 –ü–æ–∫—Ä—ã—Ç–∏–µ")

        fc = ee.FeatureCollection("projects/ee-romantik1994/assets/region")

        today = datetime.today()
        rows = sheet.get_all_values()[1:]

        for i, row in enumerate(rows, start=2):
            try:
                region_name, month_year, _ = row[0], row[1], row[2]
                geom = get_geometry(region_name, fc)
                if not geom:
                    print(f"‚ùå –†–µ–≥–∏–æ–Ω '{region_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue

                start, end, target_date = get_month_date_range(month_year)

                if target_date.year > today.year or (target_date.year == today.year and target_date.month > today.month):
                    sheet.update_cell(i, 3, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤")
                    print(f"‚ÑπÔ∏è {region_name} ‚Äî {month_year} ‚Äî –±—É–¥—É—â–∏–π –º–µ—Å—è—Ü, –ø—Ä–æ–ø—É—Å–∫")
                    continue

                image = generate_cloud_free_mosaic(geom, start, end)
                xyz_url = generate_xyz_url(image, {"bands": ["TCI_R", "TCI_G", "TCI_B"], "min": 0, "max": 3000})
                sheet.update_cell(i, 3, xyz_url)
                print(f"‚úÖ {region_name} ‚Äî {month_year} ‚Äî —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

            except Exception as row_error:
                log_error(f"—Å—Ç—Ä–æ–∫–∞ {i}", row_error)

    except Exception as main_error:
        log_error("main", main_error)

if __name__ == "__main__":
    main()
