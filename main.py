import ee
import gspread
import json
import os
import traceback
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
def log_error(context, error):
    print(f"\n‚ùå –û–®–ò–ë–ö–ê –≤ {context}:")
    print(f"–¢–∏–ø: {type(error).__name__}")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}")
    traceback.print_exc()
    print("=" * 50)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine –∏ Google Sheets
def initialize_services():
    try:
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        service_account_info = json.loads(os.environ["GEE_CREDENTIALS"])

        credentials = ee.ServiceAccountCredentials(
            service_account_info["client_email"],
            key_data=json.dumps(service_account_info)
        )
        ee.Initialize(credentials)
        print("‚úÖ Earth Engine: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        sheets_client = gspread.authorize(
            ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        )
        print("‚úÖ Google Sheets: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return sheets_client

    except Exception as e:
        log_error("initialize_services", e)
        raise

# –ü–µ—Ä–µ–≤–æ–¥ –º–µ—Å—è—Ü–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–æ–º–µ—Ä
def month_str_to_number(name):
    months = {
        "–Ø–Ω–≤–∞—Ä—å": "01", "–§–µ–≤—Ä–∞–ª—å": "02", "–ú–∞—Ä—Ç": "03", "–ê–ø—Ä–µ–ª—å": "04",
        "–ú–∞–π": "05", "–ò—é–Ω—å": "06", "–ò—é–ª—å": "07", "–ê–≤–≥—É—Å—Ç": "08",
        "–°–µ–Ω—Ç—è–±—Ä—å": "09", "–û–∫—Ç—è–±—Ä—å": "10", "–ù–æ—è–±—Ä—å": "11", "–î–µ–∫–∞–±—Ä—å": "12"
    }
    return months.get(name.strip().capitalize(), None)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞
def get_geometry_from_asset(region_name):
    fc = ee.FeatureCollection("projects/ee-romantik1994/assets/region")
    region = fc.filter(ee.Filter.eq("title", region_name)).first()
    if region is None:
        raise ValueError(f"–†–µ–≥–∏–æ–Ω '{region_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Å—Å–µ—Ç–µ")
    return region.geometry()

# –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞–∫–æ–≤ –ø–æ SCL
def mask_clouds(img):
    scl = img.select("SCL")
    cloud_mask = scl.neq(3).And(scl.neq(8)).And(scl.neq(9)).And(scl.neq(10))
    return img.updateMask(cloud_mask)

# –ü–æ–¥—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø–ª–æ—â–∞–¥–∏ —Å–Ω–∏–º–∫–∞
def get_valid_area(img, geom):
    # SCL –º–∞—Å–∫–∞: —É–¥–∞–ª—è–µ–º –æ–±–ª–∞–∫–∞, —Ç–µ–Ω–∏, –≤–æ–¥—É
    scl = img.select("SCL")
    valid_mask = scl.neq(3).And(scl.neq(8)).And(scl.neq(9)).And(scl.neq(10))
    
    # –°—á–∏—Ç–∞–µ–º —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
    count = valid_mask.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=geom,
        scale=20,
        maxPixels=1e9
    ).get("SCL")
    
    pixel_area = ee.Number(400)  # 20–º x 20–º = 400 –º¬≤
    return ee.Number(count).multiply(pixel_area)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def get_minimum_mosaic(collection, geom, threshold=0.95):
    total_area = ee.Number(
        ee.Image.pixelArea().reduceRegion(
            reducer=ee.Reducer.sum(),
            geometry=geom,
            scale=20,
            maxPixels=2e9
        ).get("area")
    )

    def iterate_function(img, state):
        img = ee.Image(img)
        state = ee.Dictionary(state)

        current_area = ee.Number(state.get("current_area"))
        images = ee.List(state.get("images"))

        new_area = get_valid_area(img, geom)
        total = current_area.add(new_area)
        images = images.add(img)

        return ee.Algorithms.If(
            total.divide(total_area).lt(threshold),
            ee.Dictionary({"current_area": total, "images": images}),
            state  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
        )

    initial_state = ee.Dictionary({"current_area": 0, "images": ee.List([])})
    final_state = ee.List(collection.toList(collection.size())) \
        .iterate(iterate_function, initial_state)

    result_list = ee.Dictionary(final_state).get("images")
    return ee.ImageCollection(ee.List(result_list))

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
def update_sheet(sheets_client):
    try:
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")

        SPREADSHEET_ID = "1oz12JnCKuM05PpHNR1gkNR_tPENazabwOGkWWeAc2hY"
        SHEET_NAME = "Sentinel-2 –ü–æ–∫—Ä—ã—Ç–∏–µ"

        spreadsheet = sheets_client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)
        data = worksheet.get_all_values()

        for row_idx, row in enumerate(data[1:], start=2):
            try:
                region, date_str = row[:2]
                if not region or not date_str:
                    continue

                parts = date_str.strip().split()
                if len(parts) != 2:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: '{date_str}'")

                month_num = month_str_to_number(parts[0])
                year = parts[1]
                start = f"{year}-{month_num}-01"
                end = ee.Date(start).advance(1, "month")

                print(f"\nüåç {region} ‚Äî {start} - {end.format('YYYY-MM-dd').getInfo()}")
                geometry = get_geometry_from_asset(region)

                # –ö–æ–ª–ª–µ–∫—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                collection = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED") \
                    .filterDate(start, end) \
                    .filterBounds(geometry) \
                    .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", 40)) \
                    .sort("CLOUDY_PIXEL_PERCENTAGE") \
                    .map(mask_clouds)

                count = collection.size().getInfo()
                if count == 0:
                    worksheet.update_cell(row_idx, 3, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤")
                    continue

                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–∑–∞–∏–∫–∞
                best_subset = get_minimum_mosaic(collection, geometry, threshold=0.95)

                # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –º–æ–∑–∞–∏–∫–æ–π
                best_subset = best_subset.map(lambda img: img.resample("bicubic"))

                mosaic = best_subset.mosaic().clip(geometry)

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                vis = {"bands": ["TCI_R", "TCI_G", "TCI_B"], "min": 0, "max": 255}
                tile_info = ee.data.getMapId({
                    "image": mosaic,
                    "visParams": vis
                })
                mapid = tile_info["mapid"].split("/")[-1]
                xyz = f"https://earthengine.googleapis.com/v1/projects/ee-romantik1994/maps/{mapid}/tiles/{{z}}/{{x}}/{{y}}"

                worksheet.update_cell(row_idx, 3, xyz)

            except Exception as e:
                log_error(f"–°—Ç—Ä–æ–∫–∞ {row_idx}", e)
                worksheet.update_cell(row_idx, 3, f"–û—à–∏–±–∫–∞: {str(e)[:100]}")

    except Exception as e:
        log_error("update_sheet", e)
        raise

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        client = initialize_services()
        update_sheet(client)
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        log_error("main", e)
        exit(1)
