import ee
import gspread
import json
import os
import traceback
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
def log_error(context, error):
    print(f"\n‚ùå –û–®–ò–ë–ö–ê –≤ {context}:")
    print(f"–¢–∏–ø: {type(error).__name__}")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}")
    traceback.print_exc()
    print("=" * 50)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine –∏ Google Sheets
def initialize_services():
    try:
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        service_account_info = json.loads(os.environ["GEE_CREDENTIALS"])

        credentials = ee.ServiceAccountCredentials(
            service_account_info["client_email"],
            key_data=json.dumps(service_account_info)
        )
        ee.Initialize(credentials)
        print("‚úÖ Earth Engine: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        sheets_client = gspread.authorize(
            ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        )
        print("‚úÖ Google Sheets: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return sheets_client

    except Exception as e:
        log_error("initialize_services", e)
        raise

# –ü–µ—Ä–µ–≤–æ–¥ –º–µ—Å—è—Ü–∞
def month_str_to_number(name):
    months = {
        "–Ø–Ω–≤–∞—Ä—å": "01", "–§–µ–≤—Ä–∞–ª—å": "02", "–ú–∞—Ä—Ç": "03", "–ê–ø—Ä–µ–ª—å": "04",
        "–ú–∞–π": "05", "–ò—é–Ω—å": "06", "–ò—é–ª—å": "07", "–ê–≤–≥—É—Å—Ç": "08",
        "–°–µ–Ω—Ç—è–±—Ä—å": "09", "–û–∫—Ç—è–±—Ä—å": "10", "–ù–æ—è–±—Ä—å": "11", "–î–µ–∫–∞–±—Ä—å": "12"
    }
    return months.get(name.strip().capitalize(), None)

# –ì–µ–æ–º–µ—Ç—Ä–∏—è —Ä–µ–≥–∏–æ–Ω–∞
def get_geometry_from_asset(region_name):
    fc = ee.FeatureCollection("projects/ee-romantik1994/assets/region")
    region = fc.filter(ee.Filter.eq("title", region_name)).first()
    if region is None:
        raise ValueError(f"–†–µ–≥–∏–æ–Ω '{region_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Å—Å–µ—Ç–µ")
    return region.geometry()

# –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞–∫–æ–≤ –ø–æ SCL
def mask_clouds(img):
    scl = img.select("SCL")
    cloud_mask = scl.neq(3).And(scl.neq(8)).And(scl.neq(9)).And(scl.neq(10))
    return img.updateMask(cloud_mask)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–π–ª–æ–≤ 0.25¬∞ x 0.25¬∞
def generate_tiles(geometry, tile_size_deg=0.25):
    bounds = geometry.bounds().coordinates().get(0)
    coords = ee.List(bounds)
    lons = coords.map(lambda c: ee.List(c).get(0))
    lats = coords.map(lambda c: ee.List(c).get(1))
    xmin = ee.Number(lons.reduce(ee.Reducer.min()))
    xmax = ee.Number(lons.reduce(ee.Reducer.max()))
    ymin = ee.Number(lats.reduce(ee.Reducer.min()))
    ymax = ee.Number(lats.reduce(ee.Reducer.max()))

    tiles = []
    lat = ymin
    while lat.lt(ymax):
        lon = xmin
        while lon.lt(xmax):
            tile = ee.Geometry.Rectangle(
                [lon, lat, lon.add(tile_size_deg), lat.add(tile_size_deg)]
            ).intersection(geometry, 1)
            tiles.append(tile)
            lon = lon.add(tile_size_deg)
        lat = lat.add(tile_size_deg)

    return ee.List(tiles)

# –°–±–æ—Ä–∫–∞ –º–æ–∑–∞–∏–∫–∏ –ø–æ —Ç–∞–π–ª–∞–º
def build_mosaic_from_tiles(geometry, start, end):
    tiles = generate_tiles(geometry)

    def process_tile(tile):
        tile_geom = ee.Geometry(tile)
        collection = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED") \
            .filterDate(start, end) \
            .filterBounds(tile_geom) \
            .map(mask_clouds)

        return collection.mosaic().clip(tile_geom)

    mosaics = tiles.map(process_tile)
    return ee.ImageCollection(mosaics).mosaic().clip(geometry)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞

def update_sheet(sheets_client):
    try:
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")

        SPREADSHEET_ID = "1oz12JnCKuM05PpHNR1gkNR_tPENazabwOGkWWeAc2hY"
        SHEET_NAME = "Sentinel-2 –ü–æ–∫—Ä—ã—Ç–∏–µ"

        spreadsheet = sheets_client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)
        data = worksheet.get_all_values()

        for row_idx, row in enumerate(data[1:], start=2):
            try:
                region, date_str = row[:2]
                if not region or not date_str:
                    continue

                parts = date_str.strip().split()
                if len(parts) != 2:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: '{date_str}'")

                month_num = month_str_to_number(parts[0])
                year = parts[1]
                start = f"{year}-{month_num}-01"
                end = f"{year}-{month_num}-28"  # –£—Å–ª–æ–≤–Ω—ã–π –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞

                print(f"\nüåç {region} ‚Äî {start} - {end}")

                geometry = get_geometry_from_asset(region)
                collection = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED") \
                    .filterDate(start, end) \
                    .filterBounds(geometry)

                if collection.size().getInfo() == 0:
                    worksheet.update_cell(row_idx, 3, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤")
                    continue

                mosaic = build_mosaic_from_tiles(geometry, start, end)
                rgb = mosaic.select(["TCI_R", "TCI_G", "TCI_B"]).divide(255).multiply(255).uint8()
                tile_info = ee.data.getMapId({"image": rgb.clip(geometry)})
                mapid = tile_info["mapid"]
                xyz = f"https://earthengine.googleapis.com/v1/projects/ee-romantik1994/maps/{mapid}/tiles/{{z}}/{{x}}/{{y}}"

                worksheet.update_cell(row_idx, 3, xyz)

            except Exception as e:
                log_error(f"–°—Ç—Ä–æ–∫–∞ {row_idx}", e)
                worksheet.update_cell(row_idx, 3, f"–û—à–∏–±–∫–∞: {str(e)[:100]}")

    except Exception as e:
        log_error("update_sheet", e)
        raise

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        client = initialize_services()
        update_sheet(client)
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        log_error("main", e)
        exit(1)
