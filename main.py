import ee 
import gspread
import json
import os
import traceback
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

#  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
def log_error(context, error):
    print(f"\n‚ùå –û–®–ò–ë–ö–ê –≤ {context}:")
    print(f"–¢–∏–ø: {type(error).__name__}")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}")
    traceback.print_exc()
    print("=" * 50)

#  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine –∏ Google Sheets
def initialize_services():
    try:
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        service_account_info = json.loads(os.environ["GEE_CREDENTIALS"])
        credentials = ee.ServiceAccountCredentials(
            service_account_info["client_email"],
            key_data=json.dumps(service_account_info)
        )
        ee.Initialize(credentials)
        print("‚úÖ Earth Engine: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        sheets_client = gspread.authorize(
            ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        )
        drive_service = build("drive", "v3", credentials=credentials)
        print("‚úÖ Google Sheets –∏ Drive: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return sheets_client, drive_service

    except Exception as e:
        log_error("initialize_services", e)
        raise

#  –ü–µ—Ä–µ–≤–æ–¥ –º–µ—Å—è—Ü–∞
def month_str_to_number(name):
    months = {
        "–Ø–Ω–≤–∞—Ä—å": "01", "–§–µ–≤—Ä–∞–ª—å": "02", "–ú–∞—Ä—Ç": "03", "–ê–ø—Ä–µ–ª—å": "04",
        "–ú–∞–π": "05", "–ò—é–Ω—å": "06", "–ò—é–ª—å": "07", "–ê–≤–≥—É—Å—Ç": "08",
        "–°–µ–Ω—Ç—è–±—Ä—å": "09", "–û–∫—Ç—è–±—Ä—å": "10", "–ù–æ—è–±—Ä—å": "11", "–î–µ–∫–∞–±—Ä—å": "12"
    }
    return months.get(name.strip().capitalize(), None)

#  –ì–µ–æ–º–µ—Ç—Ä–∏—è —Ä–µ–≥–∏–æ–Ω–∞
def get_geometry_from_asset(region_name):
    fc = ee.FeatureCollection("projects/ee-romantik1994/assets/region")
    region = fc.filter(ee.Filter.eq("title", region_name)).first()
    if region is None:
        raise ValueError(f"–†–µ–≥–∏–æ–Ω '{region_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Å—Å–µ—Ç–µ")
    return region.geometry()

#  –°–æ–∑–¥–∞–Ω–∏–µ .qlr-—Ñ–∞–π–ª–∞
def create_qlr_file(region, date_str, xyz_url):
    content = f'''<qgis styleCategories="AllStyleCategories" version="3.28">
  <layer-tree-layer id="{region}_{date_str}" name="{region} {date_str}" providerKey="wms" checked="Qt::Checked">
    <customproperties/>
  </layer-tree-layer>
  <maplayer type="raster" name="{region} {date_str}" layername="{region} {date_str}" srs="EPSG:3857" url="{xyz_url}" provider="wms">
    <wmsLayers><layer>Sentinel-2</layer></wmsLayers>
    <tileMatrixSet>GoogleMapsCompatible</tileMatrixSet>
    <wmsFormat>image/png</wmsFormat>
  </maplayer>
</qgis>'''
    filename = f"{region}_{date_str.replace(' ', '_')}.qlr"
    filepath = f"/tmp/{filename}"
    with open(filepath, "w") as f:
        f.write(content)
    return filepath, filename

#  –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive
def upload_to_drive(service_account_info, file_path, file_name):
    try:
        import json
        import googleapiclient.discovery
        from googleapiclient.http import MediaFileUpload
        from google.oauth2 import service_account

        folder_id = "1IAAEI0NDp_X5iy78jmGPzwJcF6POykRd"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if isinstance(service_account_info, str):
            try:
                service_account_info = json.loads(service_account_info)
            except json.JSONDecodeError:
                raise ValueError("‚ùå service_account_info ‚Äî —Å—Ç—Ä–æ–∫–∞, –Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.")

        creds = service_account.Credentials.from_service_account_info(service_account_info)
        drive_service = googleapiclient.discovery.build("drive", "v3", credentials=creds)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ
        try:
            _ = drive_service.files().get(fileId=folder_id, fields="id").execute()
        except Exception as e:
            raise PermissionError(
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —Å ID {folder_id}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç "
                f"{service_account_info.get('client_email', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ —Å —Ä–æ–ª—å—é '–†–µ–¥–∞–∫—Ç–æ—Ä'."
            )

        file_metadata = {
            "name": file_name,
            "parents": [folder_id]
        }
        media = MediaFileUpload(file_path, mimetype="application/xml")
        file = drive_service.files().create(body=file_metadata, media_body=media, fields="id").execute()

        file_id = file.get("id")
        return f"https://drive.google.com/uc?id={file_id}&export=download"

    except PermissionError as pe:
        log_error("upload_to_drive (–¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ)", pe)
        return f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(pe)}"
    except Exception as e:
        log_error("upload_to_drive", e)
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"

#  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
def update_sheet(sheets_client, drive_service):
    try:
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")

        SPREADSHEET_ID = "1oz12JnCKuM05PpHNR1gkNR_tPENazabwOGkWWeAc2hY"
        SHEET_NAME = "Sentinel-2 –ü–æ–∫—Ä—ã—Ç–∏–µ"

        spreadsheet = sheets_client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)
        data = worksheet.get_all_values()

        for row_idx, row in enumerate(data[1:], start=2):
            try:
                region, date_str = row[:2]
                if not region or not date_str:
                    continue

                parts = date_str.strip().split()
                if len(parts) != 2:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: '{date_str}'")

                month_num = month_str_to_number(parts[0])
                year = parts[1]
                start = f"{year}-{month_num}-01"
                end = ee.Date(start).advance(1, "month")

                print(f"\nüåç {region} ‚Äî {start} - {end.format('YYYY-MM-dd').getInfo()}")
                geometry = get_geometry_from_asset(region)

                def mask_clouds(img):
                    scl = img.select("SCL")
                    cloud_classes = ee.List([3, 8, 9, 10])
                    mask = scl.remap(cloud_classes, ee.List.repeat(0, cloud_classes.length()), 1)
                    return img.updateMask(mask)

                collection = ee.ImageCollection("COPERNICUS/S2_SR") \
                    .filterDate(start, end) \
                    .filterBounds(geometry) \
                    .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", 60)) \
                    .map(mask_clouds) \
                    .map(lambda img: img.select(["TCI_R", "TCI_G", "TCI_B"])
                         .resample("bicubic")
                         .copyProperties(img, img.propertyNames()))

                if collection.size().getInfo() == 0:
                    worksheet.update_cell(row_idx, 3, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤")
                    print("‚ö†Ô∏è –ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤")
                    continue

                mosaic = collection.mosaic().clip(geometry)
                kernel = ee.Kernel.gaussian(1.2, 1.2, "pixels", True)
                smoothed = mosaic.convolve(kernel)

                vis_params = {"bands": ["TCI_R", "TCI_G", "TCI_B"], "min": 0, "max": 255}
                vis_image = smoothed.visualize(**vis_params)
                map_info = ee.data.getMapId({"image": vis_image})
                xyz_url = f"https://earthengine.googleapis.com/v1/projects/ee-romantik1994/maps/{map_info['mapid']}/tiles/{{z}}/{{x}}/{{y}}?token={map_info['token']}"

                qlr_path, qlr_filename = create_qlr_file(region, date_str, xyz_url)
                download_url = upload_to_drive(qlr_path, qlr_filename, drive_service)
                worksheet.update_cell(row_idx, 3, download_url)
                print(f"‚úÖ {region} {date_str} ‚Äî –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {download_url}")

            except Exception as e:
                log_error(f"–°—Ç—Ä–æ–∫–∞ {row_idx}", e)
                worksheet.update_cell(row_idx, 3, f"–û—à–∏–±–∫–∞: {str(e)[:100]}")

    except Exception as e:
        log_error("update_sheet", e)
        raise

#  –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        client, drive = initialize_services()
        update_sheet(client, drive)
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        log_error("main", e)
        exit(1)
