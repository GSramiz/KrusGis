import ee
import gspread
import json
import os
import traceback
import calendar
from oauth2client.service_account import ServiceAccountCredentials

def log_error(context, error):
    print(f"\n‚ùå –û–®–ò–ë–ö–ê –≤ {context}:")
    print(f"–¢–∏–ø: {type(error).__name__}")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}")
    traceback.print_exc()
    print("=" * 50)

def initialize_services():
    try:
        print("\n–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        service_account_info = json.loads(os.environ["GEE_CREDENTIALS"])

        credentials = ee.ServiceAccountCredentials(
            service_account_info["client_email"],
            key_data=json.dumps(service_account_info)
        )
        ee.Initialize(credentials)
        print("‚úÖ Earth Engine: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        sheets_client = gspread.authorize(
            ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        )
        print("‚úÖ Google Sheets: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return sheets_client

    except Exception as e:
        log_error("initialize_services", e)
        raise

def month_str_to_number(name):
    months = {
        "–Ø–Ω–≤–∞—Ä—å": "01", "–§–µ–≤—Ä–∞–ª—å": "02", "–ú–∞—Ä—Ç": "03", "–ê–ø—Ä–µ–ª—å": "04",
        "–ú–∞–π": "05", "–ò—é–Ω—å": "06", "–ò—é–ª—å": "07", "–ê–≤–≥—É—Å—Ç": "08",
        "–°–µ–Ω—Ç—è–±—Ä—å": "09", "–û–∫—Ç—è–±—Ä—å": "10", "–ù–æ—è–±—Ä—å": "11", "–î–µ–∫–∞–±—Ä—å": "12"
    }
    return months.get(name.strip().capitalize(), None)

def get_geometry_from_asset(region_name):
    fc = ee.FeatureCollection("projects/ee-romantik1994/assets/region")
    region = fc.filter(ee.Filter.eq("title", region_name)).first()
    if region is None:
        raise ValueError(f"–†–µ–≥–∏–æ–Ω '{region_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Å—Å–µ—Ç–µ")
    return region.geometry()

def mask_clouds(img):
    scl = img.select("SCL")
    cloud_mask = scl.neq(3).And(scl.neq(8)).And(scl.neq(9)).And(scl.neq(10))
    return img.updateMask(cloud_mask).resample("bilinear")

def update_sheet(sheets_client):
    try:
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")

        SPREADSHEET_ID = "1oz12JnCKuM05PpHNR1gkNR_tPENazabwOGkWWeAc2hY"
        SHEET_NAME = "Sentinel-2 –ü–æ–∫—Ä—ã—Ç–∏–µ"

        spreadsheet = sheets_client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)
        data = worksheet.get_all_values()

        for row_idx, row in enumerate(data[1:], start=2):
            try:
                region, date_str = row[:2]
                if not region or not date_str:
                    continue

                parts = date_str.strip().split()
                if len(parts) != 2:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: '{date_str}'")

                month_num = month_str_to_number(parts[0])
                year = parts[1]
                start = f"{year}-{month_num}-01"
                days = calendar.monthrange(int(year), int(month_num))[1]
                end_str = f"{year}-{month_num}-{days:02d}"

                print(f"\nüåç {region} ‚Äî {start} - {end_str}")

                geometry = get_geometry_from_asset(region)

                collection = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED") \
                    .filterDate(start, end_str) \
                    .filterBounds(geometry) \
                    .map(mask_clouds)

                size = collection.size().getInfo()
                if size == 0:
                    worksheet.update_cell(row_idx, 3, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤")
                    continue

                # –ü–æ—Å—Ç—Ä–æ–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –º–æ–∑–∞–∏–∫—É
                mosaic = collection.mosaic()

                # –ò—Å–∫–ª—é—á–∏–º —Å–Ω–∏–º–∫–∏, –Ω–µ –≤–Ω–µ—Å—à–∏–µ –≤–∫–ª–∞–¥
                def contributed(img):
                    mask = img.mask().reduce(ee.Reducer.anyNonZero())
                    mosaic_mask = mosaic.mask().reduce(ee.Reducer.anyNonZero())
                    overlap = mask.And(mosaic_mask)
                    return img.updateMask(overlap)

                def has_mask(img):
                    mask = img.mask().reduce(ee.Reducer.anyNonZero())
                    return img.set("has_mask", mask)

                filtered_collection = collection.map(contributed).map(has_mask) \
                    .filter(ee.Filter.eq("has_mask", 1))

                # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏–º –º–æ–∑–∞–∏–∫—É —Ç–æ–ª—å–∫–æ –∏–∑ —Å–Ω–∏–º–∫–æ–≤, —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ø–∞–≤—à–∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                filtered_mosaic = filtered_collection.mosaic()

                vis = {"bands": ["TCI_R", "TCI_G", "TCI_B"], "min": 0, "max": 255}
                visualized = filtered_mosaic.select(["TCI_R", "TCI_G", "TCI_B"]).visualize(**vis)

                tile_info = ee.data.getMapId({"image": visualized})
                clean_mapid = tile_info["mapid"].split("/")[-1]
                xyz = f"https://earthengine.googleapis.com/v1/projects/ee-romantik1994/maps/{clean_mapid}/tiles/{{z}}/{{x}}/{{y}}"

                worksheet.update_cell(row_idx, 3, xyz)

            except Exception as e:
                log_error(f"–°—Ç—Ä–æ–∫–∞ {row_idx}", e)
                worksheet.update_cell(row_idx, 3, f"–û—à–∏–±–∫–∞: {str(e)[:100]}")

    except Exception as e:
        log_error("update_sheet", e)
        raise
