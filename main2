import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Загрузка переменных окружения
load_dotenv()

# Авторизация через сервисный аккаунт
def initialize_services():
    print("Инициализация сервисов...")
    service_account_info = json.loads(os.environ["GEE_CREDENTIALS"])
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(
        service_account_info,
        scopes=["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    )
    gc = gspread.authorize(credentials)
    return gc

# Получить задачи в заданный диапазон дат из указанной вкладки
def extract_tasks_in_range(sheet, tab_name, date_col_name='План старт', start_date=None, end_date=None, header_row=1):
    worksheet = sheet.worksheet(tab_name)
    data = worksheet.get_all_records(head=header_row)

    tasks_in_range = []
    for row in data:
        try:
            plan_date_str = row.get(date_col_name)
            if not plan_date_str:
                continue
            plan_date = datetime.strptime(plan_date_str, "%d.%m.%Y").date()
            if start_date <= plan_date <= end_date:
                tasks_in_range.append(row)
        except Exception:
            continue
    return tasks_in_range

def main():
    gc = initialize_services()
    sheet = gc.open_by_key("1oz12JnCKuM05PpHNR1gkNR_tPENazabwOGkWWeAc2hY")

    tab_names = ["Картирование", "Верификация", "Разметка"]

    # Получить диапазон дат от пользователя или использовать текущую неделю
    today = datetime.today().date()
    start_input = input(f"Введите дату начала (ДД.ММ.ГГГГ) [по умолчанию: {today.strftime('%d.%m.%Y')}]: ") or today.strftime("%d.%m.%Y")
    start_date = datetime.strptime(start_input, "%d.%m.%Y").date()
    end_input = input(f"Введите дату окончания (ДД.ММ.ГГГГ) [по умолчанию: {start_date + timedelta(days=6)}]: ") or (start_date + timedelta(days=6)).strftime("%d.%m.%Y")
    end_date = datetime.strptime(end_input, "%d.%m.%Y").date()

    all_tasks = []
    for tab in tab_names:
        tasks = extract_tasks_in_range(sheet, tab, start_date=start_date, end_date=end_date)
        all_tasks.extend(tasks)

    # Создаём или очищаем вкладку "Актуальная неделя"
    try:
        target_ws = sheet.worksheet("Актуальная неделя")
        sheet.del_worksheet(target_ws)
    except:
        pass
    target_ws = sheet.add_worksheet(title="Актуальная неделя", rows="1000", cols="20")

    if all_tasks:
        headers = all_tasks[0].keys()
        target_ws.append_row(list(headers))
        for row in all_tasks:
            target_ws.append_row([row.get(h, "") for h in headers])
    else:
        target_ws.append_row(["Нет задач в выбранный период"])

    print(f"✅ Задачи с {start_date} по {end_date} успешно обновлены.")

if __name__ == "__main__":
    main()
